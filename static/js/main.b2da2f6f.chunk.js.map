{"version":3,"sources":["Component/Box.js","Component/Grid.js","Component/Buttons.js","Component/Popup.js","index.js"],"names":["Box","selectBox","props","row","col","className","this","boxClass","id","onClick","Component","Grid","width","cols","rowsArr","i","rows","j","boxId","gridFull","push","key","style","Buttons","handleSelect","evt","gridSize","ButtonToolbar","playButton","pauseButton","clear","slow","fast","seed","gridSize1","gridSize2","gridSize3","togglePopup","Popup","bottom","closePopup","React","Main","setState","showPopup","state","gridCopy","arrayClone","Math","floor","random","clearInterval","intervalId","setInterval","play","speed","g","g2","count","generation","grid","Array","fill","map","size","text","bind","arr","JSON","parse","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2da2f6f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Box extends Component {\r\n    selectBox = () => {\r\n        this.props.selectBox(this.props.row , this.props.col);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={this.props.boxClass} \r\n                id = {this.props.id} \r\n                onClick = {this.selectBox}>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Box\r\n","import React, { Component } from 'react'\r\nimport Box from './Box'\r\n\r\nexport class Grid extends Component {\r\n    render() {\r\n        const width= this.props.cols * 14;\r\n        var rowsArr = [];\r\n\r\n        var boxClass = \"\";\r\n        for(var i=0 ; i<this.props.rows ; i++) {\r\n            for(var j=0 ; j<this.props.cols ; j++) {\r\n                let boxId = i + \"_\" + j ;\r\n\r\n                boxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\";\r\n                rowsArr.push(\r\n                    <Box boxClass = {boxClass}\r\n                        key = {boxId}\r\n                        boxId = {boxId}\r\n                        row = {i}\r\n                        col = {j}\r\n                        selectBox = {this.props.selectBox}\r\n                    />\r\n                )\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className =\"grid\" style={{width : width}}>\r\n                {rowsArr}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Grid\r\n\r\n","import React, { Component } from 'react'\r\nimport { ButtonToolbar, MenuItem , DropdownButton } from 'react-bootstrap'\r\n\r\nexport class Buttons extends Component {\r\n    handleSelect = (evt) => {\r\n        this.props.gridSize(evt);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className = 'center'>\r\n                <ButtonToolbar>\r\n                    <button className = 'btn btn-success' \r\n                        onClick={this.props.playButton}>\r\n                        Play\r\n                    </button>\r\n                    <button className = 'btn btn-danger' \r\n                        onClick={this.props.pauseButton}>\r\n                        Pause\r\n                    </button>\r\n                    <button className = 'btn btn-warning' \r\n                        onClick={this.props.clear}>\r\n                        Clear\r\n                    </button>\r\n                    <button className = 'btn btn-default' \r\n                        onClick={this.props.slow}>\r\n                        slow\r\n                    </button>\r\n                    <button className = 'btn btn-default' \r\n                        onClick={this.props.fast}>\r\n                        Fast\r\n                    </button>\r\n                    <button className = 'btn btn-primary' \r\n                        onClick={this.props.seed}>\r\n                        Seed\r\n                    </button>\r\n                    <button className = 'btn btn-default' \r\n                        onClick={this.props.gridSize1}>\r\n                        20x30\r\n                    </button>\r\n                    <button className = 'btn btn-default' \r\n                        onClick={this.props.gridSize2}>\r\n                        30x50\r\n                    </button>\r\n                    <button className = 'btn btn-default' \r\n                        onClick={this.props.gridSize3}>\r\n                        50x70\r\n                    </button>\r\n                    <button className = 'btn btn-info' \r\n                        onClick={this.props.togglePopup}>\r\n                        How it works ?\r\n                    </button>\r\n                    {/* <DropdownButton\r\n\t\t\t\t\t\ttitle=\"Grid Size\"\r\n\t\t\t\t\t\tid=\"size-menu\"\r\n\t\t\t\t\t\tonSelect={this.handleSelect}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<MenuItem eventKey=\"1\">20x10</MenuItem>\r\n\t\t\t\t\t\t<MenuItem eventKey=\"2\">50x30</MenuItem>\r\n\t\t\t\t\t\t<MenuItem eventKey=\"3\">70x50</MenuItem>\r\n\t\t\t\t\t</DropdownButton> */}\r\n                </ButtonToolbar>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Buttons\r\n","import React, { Component } from 'react'\r\n\r\nclass Popup extends React.ComponentÂ {\r\n    render() {\r\n      return (\r\n        <div className='popup'>\r\n          <div className='popup_inner'>\r\n          <h2>How it Works ?</h2>\r\n          <ul>\r\n              <li>Any live cell with two or three live neighbours lives on to the next generation.</li>\r\n              <li>Any live cell with fewer than two live neighbours dies, as if caused by under-population</li>\r\n              <li>Any live cell with more than three live neighbours dies, as if by overpopulation.</li>\r\n              <li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\r\n          </ul>\r\n          <button className=\"center btn btn-danger\" style={{bottom : \"100px\"}} onClick={this.props.closePopup}>close</button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default Popup\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Grid from './Component/Grid'\nimport Buttons from './Component/Buttons'\nimport Popup from './Component/Popup'\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props)\n        this.speed = 100;\n        this.rows = 30;\n        this.cols = 50;\n    \n        this.state = {\n            showPopup : false,\n             generation : 0,\n             gridFull : Array(this.rows).fill().map( () => Array(this.cols).fill(false)),\n        }\n    }\n\n    togglePopup = () => {\n        this.setState({\n          showPopup: !this.state.showPopup\n        });\n      }\n\n    selectBox = (row , col) => {\n        let gridCopy = arrayClone(this.state.gridFull);\n        gridCopy[row][col] = !gridCopy[row][col]\n        this.setState({\n            gridFull : gridCopy\n        })\n    }\n    \n    seed = () => {\n        let gridCopy = arrayClone(this.state.gridFull);\n        for(let i=0 ; i<this.rows ; i++) {\n            for(let j=0 ; j<this.cols ; j++) {\n                if(Math.floor(Math.random() * 4) === 1) {\n                    gridCopy[i][j] = true;\n                }\n            }\n        }\n        this.setState({\n            gridFull : gridCopy\n        })\n    }\n\n    playButton = () => {\n        clearInterval(this.intervalId)\n        this.intervalId = setInterval(this.play , this.speed);\n        \n    }\n\n    play = () => {\n        let g = this.state.gridFull;\n        let g2 = arrayClone(this.state.gridFull);\n        for (let i = 0; i < this.rows; i++) {\n            for (let j = 0; j < this.cols; j++) {\n              let count = 0; // number of neighbours\n              if (i > 0) if (g[i - 1][j]) count++; // Checking each ceal if it has a neighbour\n              if (i > 0 && j > 0) if (g[i - 1][j - 1]) count++;\n              if (i > 0 && j < this.cols - 1) if (g[i - 1][j + 1]) count++;\n              if (j < this.cols - 1) if (g[i][j + 1]) count++;\n              if (j > 0) if (g[i][j - 1]) count++;\n              if (i < this.rows - 1) if (g[i + 1][j]) count++;\n              if (i < this.rows - 1 && j > 0) if (g[i + 1][j - 1]) count++;\n              if (i < this.rows - 1 && j < this.cols - 1) if (g[i + 1][j + 1]) count++;\n              if (g[i][j] && (count < 2 || count > 3)) g2[i][j] = false; // and then checking if it s gonna die or live\n              if (!g[i][j] && count === 3) g2[i][j] = true;\n            }\n          }\n          this.setState({\n            gridFull: g2,\n            generation: this.state.generation + 1\n          });\n    }\n\n    pauseButton = () => {\n        clearInterval(this.intervalId)\n    }\n\n    slow = () => {\n\t\tthis.speed = 1000;\n\t\tthis.playButton();\n\t}\n\n\tfast = () => {\n\t\tthis.speed = 100;\n\t\tthis.playButton();\n\t}\n\n\tclear = () => {\n\t\tvar grid = Array(this.rows).fill().map(() => Array(this.cols).fill(false));\n\t\tthis.setState({\n\t\t\tgridFull: grid,\n\t\t\tgeneration: 0\n        });\n        this.pauseButton()\n\t}\n\n\tgridSize = (size) => {\n\t\tswitch (size) {\n\t\t\tcase \"1\":\n\t\t\t\tthis.cols = 20;\n\t\t\t\tthis.rows = 10;\n\t\t\tbreak;\n\t\t\tcase \"2\":\n\t\t\t\tthis.cols = 50;\n\t\t\t\tthis.rows = 30;\n\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.cols = 70;\n\t\t\t\tthis.rows = 50;\n\t\t}\n\t\tthis.clear();\n\n    }\n\n    gridSize1 = () => {\n        this.cols = 30;\n        this.rows = 20;\n        this.clear();\n    }\n\n    gridSize2 = () => {\n        this.cols = 50 ;\n        this.rows = 30 ;\n        this.clear();\n    }\n\n    gridSize3 = () => \n    {\n        this.cols = 70 ;\n        this.rows = 50 ;\n        this.clear();\n    }\n    \n    componentDidMount() {\n        this.seed()\n        this.playButton()\n    }\n    render() {\n        return (\n            <div>\n                <h1>The Game of Life</h1>\n                <Buttons playButton = {this.playButton}\n                    pauseButton = {this.pauseButton}\n                    slow = {this.slow}\n                    fast = {this.fast}\n                    clear = {this.clear}\n                    seed = {this.seed}\n                    gridSize = {this.gridSize}\n                    gridSize1 = {this.gridSize1}\n                    gridSize2 = {this.gridSize2}\n                    gridSize3 = {this.gridSize3}\n                    togglePopup = {this.togglePopup}\n                />\n                <Grid gridFull = {this.state.gridFull}\n                    rows = {this.rows}\n                    cols = {this.cols}\n                    selectBox = {this.selectBox}/>\n                <h2>Generation : {this.state.generation}</h2>\n\n                {this.state.showPopup ? \n                <Popup\n                    text='Close Me'\n                    closePopup={this.togglePopup.bind(this)}\n                />\n                : null\n                }\n            </div>\n        )\n    } \n}\n\nfunction arrayClone(arr)\n{\n    return JSON.parse(JSON.stringify(arr));\n}\n\nReactDOM.render(<Main/>, document.getElementById('root'));\n\n"],"sourceRoot":""}